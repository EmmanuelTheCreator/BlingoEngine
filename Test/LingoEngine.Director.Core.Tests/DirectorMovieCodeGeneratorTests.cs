using FluentAssertions;
using LingoEngine.IO.Data.DTO;
using LingoEngine.Director.Core.Projects;
using System.Collections.Generic;

namespace LingoEngine.Director.Core.Tests;

public class DirectorMovieCodeGeneratorTests
{
    [Theory]
    [InlineData(LingoMemberTypeDTO.Bitmap, nameof(LingoEngine.Bitmaps.LingoMemberBitmap))]
    [InlineData(LingoMemberTypeDTO.Sound, nameof(LingoEngine.Sounds.LingoMemberSound))]
    [InlineData(LingoMemberTypeDTO.FilmLoop, nameof(LingoEngine.FilmLoops.LingoFilmLoopMember))]
    [InlineData(LingoMemberTypeDTO.Text, nameof(LingoEngine.Texts.LingoMemberText))]
    [InlineData(LingoMemberTypeDTO.Field, nameof(LingoEngine.Texts.LingoMemberField))]
    [InlineData(LingoMemberTypeDTO.Shape, nameof(LingoEngine.Shapes.LingoMemberShape))]
    [InlineData(LingoMemberTypeDTO.Script, nameof(LingoEngine.Scripts.LingoMemberScript))]
    [InlineData(LingoMemberTypeDTO.Palette, nameof(LingoEngine.ColorPalettes.LingoColorPaletteMember))]
    [InlineData(LingoMemberTypeDTO.Transition, nameof(LingoEngine.Transitions.LingoTransitionMember))]
    [InlineData((LingoMemberTypeDTO)999, nameof(LingoEngine.Members.LingoMember))]
    public void MemberClass_Returns_Expected_Type(LingoMemberTypeDTO type, string expected)
    {
        var gen = new DirectorMovieCodeGenerator();
        gen.MemberClass(type).Should().Be(expected);
    }

    private class TestGenerator : DirectorMovieCodeGenerator
    {
        public new string GenerateMember(LingoMemberDTO dto, int idx) => base.GenerateMember(dto, idx);
        public new string GenerateScoreClass(LingoMovieDTO movie) => base.GenerateScoreClass(movie);
        public new string GenerateCastClass(LingoCastDTO cast) => base.GenerateCastClass(cast);
        public new string GenerateMovieClass(LingoMovieDTO movie) => base.GenerateMovieClass(movie);
    }

    [Fact]
    public void GenerateMember_Skips_Default_Properties()
    {
        var gen = new TestGenerator();
        var dto = new LingoMemberDTO
        {
            Type = LingoMemberTypeDTO.Bitmap,
            NumberInCast = 1,
            Name = "m",
            Width = 10
        };
        var code = gen.GenerateMember(dto, 1);
        code.Should().Contain("member1.Width = 10");
        code.Should().NotContain("member1.Size");
    }

    [Fact]
    public void GenerateScoreClass_Skips_Default_Properties()
    {
        var gen = new TestGenerator();
        var sprite = new LingoSpriteDTO { SpriteNum = 1, MemberNum = 1, BeginFrame = 0, EndFrame = 0, Ink = 1 };
        var cast = new LingoCastDTO
        {
            Name = "Main",
            Members = new List<LingoMemberDTO>
            {
                new()
                {
                    Number = 1,
                    NumberInCast = 1,
                    CastLibNum = 1,
                    Type = LingoMemberTypeDTO.Bitmap
                }
            }
        };
        var movie = new LingoMovieDTO
        {
            Sprites = new List<LingoSpriteDTO> { sprite },
            Casts = new List<LingoCastDTO> { cast }
        };
        var code = gen.GenerateScoreClass(movie);
        code.Should().Contain("s.Ink = 1");
        code.Should().NotContain("s.Puppet");
    }

    [Fact]
    public void GenerateCastClass_GeneratesExpectedCode()
    {
        var gen = new TestGenerator();
        var cast = new LingoCastDTO
        {
            Name = "Main",
            Members = new List<LingoMemberDTO>
            {
                new()
                {
                    NumberInCast = 1,
                    Type = LingoMemberTypeDTO.Bitmap,
                    Name = "Sprite"
                }
            }
        };
        var code = gen.GenerateCastClass(cast);
        var expected = """
// <auto-generated>
// This code was generated by LingoEngine.Director C#.
// </auto-generated>
using LingoEngine.Casts;
using LingoEngine.Core;
using LingoEngine.Members;
using LingoEngine.Bitmaps;
using LingoEngine.Sounds;
using LingoEngine.FilmLoops;
using LingoEngine.Texts;
using LingoEngine.Shapes;
using LingoEngine.Scripts;
using LingoEngine.ColorPalettes;
using LingoEngine.Transitions;
using AbstUI.Primitives;

public class MainCast : ILingoCastLibBuilder
{
    public void Build(ILingoCastLibsContainer castLibs)
    {
        var cast = castLibs.AddCast(@"Main", false);
        var member1 = (LingoMemberBitmap)cast.Add(LingoMemberType.Bitmap, 1, @"Sprite", @"", new APoint(0, 0));
    }
}
""";
        code.Trim().Should().Be(expected.Trim());
    }

    [Fact]
    public void GenerateScoreClass_GeneratesExpectedCode()
    {
        var gen = new TestGenerator();
        var sprite = new LingoSpriteDTO { SpriteNum = 1, MemberNum = 1, BeginFrame = 0, EndFrame = 0 };
        var cast = new LingoCastDTO
        {
            Name = "Main",
            Members = new List<LingoMemberDTO>
            {
                new() { Number = 1, NumberInCast = 1, CastLibNum = 1, Type = LingoMemberTypeDTO.Bitmap }
            }
        };
        var movie = new LingoMovieDTO
        {
            Sprites = new List<LingoSpriteDTO> { sprite },
            Casts = new List<LingoCastDTO> { cast }
        };
        var code = gen.GenerateScoreClass(movie);
        var expected = """
// <auto-generated>
// This code was generated by LingoEngine.Director C#.
// </auto-generated>
using LingoEngine.Core;
using LingoEngine.Movies;
using LingoEngine.Sprites;
using LingoEngine.Members;
using AbstUI.Primitives;

public class ScoreBuilder : ILingoScoreBuilder
{
    public void Build(ILingoMovie movie)
    {
        movie.AddSprite(1, 0, 0, 0f, 0f, s =>
        {
            s.Member = movie.CastLib.GetMember(1, 1) as LingoMember;
        });
    }
}
""";
        code.Trim().Should().Be(expected.Trim());
    }

    [Fact]
    public void GenerateMovieClass_GeneratesExpectedCode()
    {
        var gen = new TestGenerator();
        var cast = new LingoCastDTO { Name = "Main" };
        var movie = new LingoMovieDTO
        {
            Name = "Movie",
            Tempo = 12,
            Casts = new List<LingoCastDTO> { cast },
            Sprites = new List<LingoSpriteDTO>()
        };
        var code = gen.GenerateMovieClass(movie);
        var expected = """
// <auto-generated>
// This code was generated by LingoEngine.Director C#.
// </auto-generated>
using LingoEngine.Core;
using LingoEngine.Movies;

public class MovieBuilder : ILingoMovieBuilder
{
    public ILingoMovie Build(ILingoPlayer player)
    {
        player.CastLibs.LoadCastLibFromBuilder(new MainCast());
        var movie = player.NewMovie(@"Movie");
        movie.Tempo = 12;
        new ScoreBuilder().Build(movie);
        return movie;
    }
}
""";
        code.Trim().Should().Be(expected.Trim());
    }
}
