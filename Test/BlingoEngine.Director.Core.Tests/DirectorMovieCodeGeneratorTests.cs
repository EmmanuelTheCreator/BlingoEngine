using FluentAssertions;
using BlingoEngine.IO.Data.DTO;
using BlingoEngine.Director.Core.Projects;
using System.Collections.Generic;

namespace BlingoEngine.Director.Core.Tests;

public class DirectorMovieCodeGeneratorTests
{
    [Theory]
    [InlineData(BlingoMemberTypeDTO.Bitmap, nameof(BlingoEngine.Bitmaps.BlingoMemberBitmap))]
    [InlineData(BlingoMemberTypeDTO.Sound, nameof(BlingoEngine.Sounds.BlingoMemberSound))]
    [InlineData(BlingoMemberTypeDTO.FilmLoop, nameof(BlingoEngine.FilmLoops.BlingoFilmLoopMember))]
    [InlineData(BlingoMemberTypeDTO.Text, nameof(BlingoEngine.Texts.BlingoMemberText))]
    [InlineData(BlingoMemberTypeDTO.Field, nameof(BlingoEngine.Texts.BlingoMemberField))]
    [InlineData(BlingoMemberTypeDTO.Shape, nameof(BlingoEngine.Shapes.BlingoMemberShape))]
    [InlineData(BlingoMemberTypeDTO.Script, nameof(BlingoEngine.Scripts.BlingoMemberScript))]
    [InlineData(BlingoMemberTypeDTO.Palette, nameof(BlingoEngine.ColorPalettes.BlingoColorPaletteMember))]
    [InlineData(BlingoMemberTypeDTO.Transition, nameof(BlingoEngine.Transitions.BlingoTransitionMember))]
    [InlineData((BlingoMemberTypeDTO)999, nameof(BlingoEngine.Members.BlingoMember))]
    public void MemberClass_Returns_Expected_Type(BlingoMemberTypeDTO type, string expected)
    {
        var gen = new DirectorMovieCodeGenerator();
        gen.MemberClass(type).Should().Be(expected);
    }

    private class TestGenerator : DirectorMovieCodeGenerator
    {
        public new string GenerateMember(BlingoMemberDTO dto, int idx) => base.GenerateMember(dto, idx);
        public new string GenerateScoreClass(BlingoMovieDTO movie) => base.GenerateScoreClass(movie);
        public new string GenerateCastClass(BlingoCastDTO cast) => base.GenerateCastClass(cast);
        public new string GenerateMovieClass(BlingoMovieDTO movie) => base.GenerateMovieClass(movie);
    }

    [Fact]
    public void GenerateMember_Skips_Default_Properties()
    {
        var gen = new TestGenerator();
        var dto = new BlingoMemberDTO
        {
            Type = BlingoMemberTypeDTO.Bitmap,
            NumberInCast = 1,
            Name = "m",
            Width = 10
        };
        var code = gen.GenerateMember(dto, 1);
        code.Should().Contain("member1.Width = 10");
        code.Should().NotContain("member1.Size");
    }

    [Fact]
    public void GenerateScoreClass_Skips_Default_Properties()
    {
        var gen = new TestGenerator();
        var sprite = new Blingo2DSpriteDTO
        {
            SpriteNum = 1,
            Member = new BlingoMemberRefDTO { MemberNum = 1, CastNum = 1 },
            BeginFrame = 0,
            EndFrame = 0,
            Ink = 1
        };
        var cast = new BlingoCastDTO
        {
            Name = "Main",
            Members = new List<BlingoMemberDTO>
            {
                new()
                {
                    Number = 1,
                    NumberInCast = 1,
                    CastLibNum = 1,
                    Type = BlingoMemberTypeDTO.Bitmap
                }
            }
        };
        var movie = new BlingoMovieDTO
        {
            Sprite2Ds = new List<Blingo2DSpriteDTO> { sprite },
            Casts = new List<BlingoCastDTO> { cast }
        };
        var code = gen.GenerateScoreClass(movie);
        code.Should().Contain("s.Ink = 1");
        code.Should().NotContain("s.Puppet");
    }

    [Fact]
    public void GenerateCastClass_GeneratesExpectedCode()
    {
        var gen = new TestGenerator();
        var cast = new BlingoCastDTO
        {
            Name = "Main",
            Members = new List<BlingoMemberDTO>
            {
                new()
                {
                    NumberInCast = 1,
                    Type = BlingoMemberTypeDTO.Bitmap,
                    Name = "Sprite"
                }
            }
        };
        var code = gen.GenerateCastClass(cast);
        var expected = """
// <auto-generated>
// This code was generated by BlingoEngine.Director C#.
// </auto-generated>
using BlingoEngine.Casts;
using BlingoEngine.Core;
using BlingoEngine.Members;
using BlingoEngine.Bitmaps;
using BlingoEngine.Sounds;
using BlingoEngine.FilmLoops;
using BlingoEngine.Texts;
using BlingoEngine.Shapes;
using BlingoEngine.Scripts;
using BlingoEngine.ColorPalettes;
using BlingoEngine.Transitions;
using AbstUI.Primitives;

public class MainCast : IBlingoCastLibBuilder
{
    public async Task BuildAsync(IBlingoCastLibsContainer castLibs)
    {
        var cast = castLibs.AddCast(@"Main", false);
        var member1 = (BlingoMemberBitmap)cast.Add(BlingoMemberType.Bitmap, 1, @"Sprite", @"", new APoint(0f, 0f));
    }
}
""";
        code.Trim().Should().Be(expected.Trim());
    }

    [Fact]
    public void GenerateScoreClass_GeneratesExpectedCode()
    {
        var gen = new TestGenerator();
        var sprite = new Blingo2DSpriteDTO
        {
            SpriteNum = 1,
            Member = new BlingoMemberRefDTO { MemberNum = 1, CastNum = 1 },
            BeginFrame = 0,
            EndFrame = 0
        };
        var cast = new BlingoCastDTO
        {
            Name = "Main",
            Members = new List<BlingoMemberDTO>
            {
                new() { Number = 1, NumberInCast = 1, CastLibNum = 1, Type = BlingoMemberTypeDTO.Bitmap }
            }
        };
        var movie = new BlingoMovieDTO
        {
            Sprite2Ds = new List<Blingo2DSpriteDTO> { sprite },
            Casts = new List<BlingoCastDTO> { cast }
        };
        var code = gen.GenerateScoreClass(movie);
        var expected = """
// <auto-generated>
// This code was generated by BlingoEngine.Director C#.
// </auto-generated>
using BlingoEngine.Core;
using BlingoEngine.Movies;
using BlingoEngine.Sprites;
using BlingoEngine.Members;
using AbstUI.Primitives;

public class ScoreBuilder : IBlingoScoreBuilder
{
    public async Task BuildAsync(IBlingoMovie movie)
    {
        movie.AddSprite(1, 0, 0, 0f, 0f, s =>
        {
            s.Member = movie.CastLib.GetMember(1, 1);
        });
    }
}
""";
        code.Trim().Should().Be(expected.Trim());
    }

    [Fact]
    public void GenerateMovieClass_GeneratesExpectedCode()
    {
        var gen = new TestGenerator();
        var cast = new BlingoCastDTO { Name = "Main" };
        var movie = new BlingoMovieDTO
        {
            Name = "Movie",
            Tempo = 12,
            Casts = new List<BlingoCastDTO> { cast },
            Sprite2Ds = new List<Blingo2DSpriteDTO>()
        };
        var code = gen.GenerateMovieClass(movie);
        var expected = """
// <auto-generated>
// This code was generated by BlingoEngine.Director C#.
// </auto-generated>
using BlingoEngine.Core;
using BlingoEngine.Movies;

public class MovieBuilder : IBlingoMovieBuilder
{
    public async Task<IBlingoMovie> BuildAsync(IBlingoPlayer player)
    {
        await player.LoadAsync<MainCast>();
        var movie = player.NewMovie(@"Movie");
        movie.Tempo = 12;
        await new ScoreBuilder().BuildAsync(movie);
        return movie;
    }
}
""";
        code.Trim().Should().Be(expected.Trim());
    }
}

