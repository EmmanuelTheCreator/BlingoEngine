-- Copyright to EmmanuelTheCreator.com-- This file was written in 2005, yeah a lot has evolved since then :-)-- the spritemanager create sprites only when needed.-- it begins at 100 to have 100 sprite for decoration of the editorproperty pNum,pDestroyList,pSpritenums,pGame------------------------------------------------------------------------------------------------ create new spritemanageron new me,_beginningsprite  pNum=_beginningsprite -- pNum = Counter   pDestroyList= [] -- List for all removed sprites Number  pSpritenums=[] --all used sprites  pGame=0 --_game  return meend-- add a spriteon Sadd me  --  member("numSprites",1).text="used"&&pNum    if pDestroyList=[] then -- are there destroyed sprites    pNum=pNum+1  -- create a new one    --     check if we are at the maximum    if pNum>999 then       sprite(1000).puppet=true      sprite(1000).loc=point(100,30)      sprite(1000).member=member("TomuchSprites")      sprite(1000).ink=36      sprite(1000).blend=100      sprite(1000).locZ=10000000000000      --      updatestage      sprite(1000).blend=0      sprite(1000).loc=point(1,-40)      pNum=pNum-1      return 0      exit    end if    sprite(pNum).puppet=true    if pSpritenums.getpos(pNum)<>0 then pNum=pNum+100000    pSpritenums.append(pNum)    sprite(pNum).ink=36    return pNum  else -- create a new from the destroyed sprite list    pNumDestroy=pDestroyList.getat(1)    sprite(pNumDestroy).puppet=true    pDestroyList.deleteone(pNumDestroy)    pSpritenums.append(pNumDestroy)    sprite(pNum).ink=36    return pNumDestroy  end ifend-- destroy a spriteon SDestroy me,sprNum     if VoidP(SprNum) then me.SDestroyError("no spriteNum")  if not integerP(SprNum) then me.SDestroyError("wrong SpriteNum")  if pSpritenums.getpos(sprNum)=0 then exit  pSpritenums.deleteone(sprNum)  pDestroyList.add(sprNum)  sprite(sprNum).member=member("empty")  sprite(sprNum).locZ=sprNum  sprite(sprNum).puppet=false  -- go check if there are sprites in the idlelist  --  pGame.graphics.destroyedsprite(sprnum)  --   member("numSprites",1).text="used"&&pNum  end------------------------------------------------------------------------------------on getSpritenums me  return pSpritenumsendon checksprite me,_num  if pSpritenums.getone(_num)>0 then    return 1  else    return 0  end ifend----------------------------------------------------------------------------------------on destroy me  repeat with i in pDestroyList    me.SDestroy(i)  end repeat  pGame=void  pMap=Void  me=voidendon SDestroyError me,para  alert "SpriteDistroy received "&&para  abortend 
-- it begins at 100 to have 100 sprite for decoration of the editorproperty pNum,pDestroyList,pSpritenums,pGame------------------------------------------------------------------------------------------------ create new spritemanageron new me,_beginningsprite  pNum=_beginningsprite -- pNum = Counter   pDestroyList= [] -- List for all removed sprites Number  pSpritenums=[] --all used sprites  pGame=0 --_game  return meend-- add a spriteon Sadd me  --  member("numSprites",1).text="used"&&pNum    if pDestroyList=[] then -- are there destroyed sprites    pNum=pNum+1  -- create a new one    --     check if we are at the maximum    if pNum>999 then       sprite(1000).puppet=true      sprite(1000).loc=point(100,30)      sprite(1000).member=member("TomuchSprites")      sprite(1000).ink=36      sprite(1000).blend=100      sprite(1000).locZ=10000000000000      --      updatestage      sprite(1000).blend=0      sprite(1000).loc=point(1,-40)      pNum=pNum-1      return 0      exit    end if    sprite(pNum).puppet=true    if pSpritenums.getpos(pNum)<>0 then pNum=pNum+100000    pSpritenums.append(pNum)    sprite(pNum).ink=36    return pNum  else -- create a new from the destroyed sprite list    pNumDestroy=pDestroyList.getat(1)    sprite(pNumDestroy).puppet=true    pDestroyList.deleteone(pNumDestroy)    pSpritenums.append(pNumDestroy)    sprite(pNum).ink=36    return pNumDestroy  end ifend-- destroy a spriteon SDestroy me,sprNum     if VoidP(SprNum) then me.SDestroyError("no spriteNum")  if not integerP(SprNum) then me.SDestroyError("wrong SpriteNum")  if pSpritenums.getpos(sprNum)=0 then exit  pSpritenums.deleteone(sprNum)  pDestroyList.add(sprNum)  sprite(sprNum).member=member("empty")  sprite(sprNum).locZ=sprNum  sprite(sprNum).puppet=false  -- go check if there are sprites in the idlelist  --  pGame.graphics.destroyedsprite(sprnum)  --   member("numSprites",1).text="used"&&pNum  end------------------------------------------------------------------------------------on getSpritenums me  return pSpritenumsendon checksprite me,_num  if pSpritenums.getone(_num)>0 then    return 1  else    return 0  end ifend----------------------------------------------------------------------------------------on destroy me  repeat with i in pDestroyList    me.SDestroy(i)  end repeat  pGame=void  pMap=Void  me=voidendon SDestroyError me,para  alert "SpriteDistroy received "&&para  abortend 