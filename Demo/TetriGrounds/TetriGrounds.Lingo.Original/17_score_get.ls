property myURL, myNetID, myDone, myErr, myScoresproperty myShowTypeon new me  myURL = ""  myErr = 0  myDone = False  scores = []  myShowType = 1  return meendon setURL me, scriptURL  myURL = scriptURLendon downloadScores me  myErr = 0  myDone = False  scores = []  myNetID = getNetText(myURL)  _movie.actorList.add(me)endon stepFrame me  if netDone(myNetID) then    myErr = netError(myNetID)    if myErr = "OK" then      data = netTextResult(myNetID)      myScores = [value(data.line[1]),value(data.line[2])]      me.OutputScores()    end if    myDone = True    _movie.actorList.deleteOne(me)  end ifendon OutputScores me  if voidp(myScores) then exit  scores =myScores[1]  if voidp(scores) then exit  member("T_InternetScoresNames").text = ""  repeat with i in scores    member("T_InternetScoresNames").text = member("T_InternetScoresNames").text &i[1]&return  end repeat  member("T_InternetScores").text = ""  repeat with i in scores    member("T_InternetScores").text = member("T_InternetScores").text &i[2]&return  end repeat  scores =myScores[2]  if voidp(scores) then exit  member("T_InternetScoresNamesP").text = ""  repeat with i in scores    member("T_InternetScoresNamesP").text = member("T_InternetScoresNamesP").text &i[1]&return  end repeat  member("T_InternetScoresP").text = ""  repeat with i in scores    member("T_InternetScoresP").text = member("T_InternetScoresP").text &i[2]&return  end repeatendon GetLowestPersonalScore me  if voidp(myScores) then return 0  if not listp(myScores[2]) then return 0  if myScores[2].count<5 then return 0  return myScores[2][myScores[2].count][2]endon SetShowType me,val  myShowType = valendon getHighScoreList me  return myScoresendon getErr me  return myErrendon isDone me  return myDoneendon destroy me  if _movie.actorList.getpos(me)<>0 then _movie.actorList.deleteOne(me)end