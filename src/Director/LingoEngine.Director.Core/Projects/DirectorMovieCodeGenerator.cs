using System.Globalization;
using System.Text;
using System.Text.Json;
using System.Collections.Generic;
using LingoEngine.IO;
using LingoEngine.IO.Data.DTO;
using LingoEngine.Movies;
using LingoEngine.Members;
using LingoEngine.Bitmaps;
using LingoEngine.Sounds;
using LingoEngine.FilmLoops;
using LingoEngine.Texts;
using LingoEngine.Shapes;
using LingoEngine.Scripts;
using LingoEngine.ColorPalettes;
using LingoEngine.Transitions;

namespace LingoEngine.Director.Core.Projects;

/// <summary>
/// Generates C# source files from a movie state.
/// </summary>
public class DirectorMovieCodeGenerator
{
    private const string Header = "// <auto-generated>\n// This code was generated by LingoEngine.Director C#.\n// </auto-generated>\n";

    public void Generate(LingoMovieDTO movieDto, string setupFolder)
    {
        var dir = setupFolder;
        if (!Directory.Exists(dir))
            Directory.CreateDirectory(dir);

        foreach (var cast in movieDto.Casts)
        {
            var code = GenerateCastClass(cast);
            File.WriteAllText(Path.Combine(dir, Sanitize(cast.Name) + "Cast.cs"), code);
        }

        var scoreCode = GenerateScoreClass(movieDto);
        File.WriteAllText(Path.Combine(dir, "ScoreBuilder.cs"), scoreCode);

        var movieCode = GenerateMovieClass(movieDto);
        File.WriteAllText(Path.Combine(dir, "MovieBuilder.cs"), movieCode);
    }

    public virtual string GenerateCastClass(LingoCastDTO cast)
    {
        var sb = new StringBuilder();
        sb.Append(Header);
        sb.AppendLine("using LingoEngine.Casts;");
        sb.AppendLine("using LingoEngine.Core;");
        sb.AppendLine("using LingoEngine.Members;");
        sb.AppendLine("using LingoEngine.Bitmaps;");
        sb.AppendLine("using LingoEngine.Sounds;");
        sb.AppendLine("using LingoEngine.FilmLoops;");
        sb.AppendLine("using LingoEngine.Texts;");
        sb.AppendLine("using LingoEngine.Shapes;");
        sb.AppendLine("using LingoEngine.Scripts;");
        sb.AppendLine("using LingoEngine.ColorPalettes;");
        sb.AppendLine("using LingoEngine.Transitions;");
        sb.AppendLine("using AbstUI.Primitives;");
        sb.AppendLine();
        var className = Sanitize(cast.Name) + "Cast";
        sb.AppendLine($"public class {className} : ILingoCastLibBuilder");
        sb.AppendLine("{");
        sb.AppendLine("    public void Build(ILingoCastLibsContainer castLibs)");
        sb.AppendLine("    {");
        sb.AppendLine($"        var cast = castLibs.AddCast({FormatValue(cast.Name)}, false);");
        var idx = 0;
        foreach (var m in cast.Members)
        {
            idx++;
            sb.Append(GenerateMember(m, idx));
        }
        sb.AppendLine("    }");
        sb.AppendLine("}");
        return sb.ToString();
    }

    protected virtual string GenerateMember(LingoMemberDTO dto, int idx)
    {
        var sb = new StringBuilder();
        var typeName = Enum.GetName(typeof(LingoMemberTypeDTO), dto.Type) ?? "Unknown";
        sb.AppendLine($"        var member{idx} = ({MemberClass(dto.Type)})cast.Add(LingoMemberType.{typeName}, {dto.NumberInCast}, {FormatValue(dto.Name)}, {FormatValue(dto.FileName)}, new APoint({dto.RegPoint.X}, {dto.RegPoint.Y}));");
        foreach (var prop in dto.GetType().GetProperties())
        {
            if (prop.Name == "MarkDownText")
            {
                //member1.MarkDownText = @"Local 2 0
                var valuetxt = prop.GetValue(dto);
                if (valuetxt == null || IsDefaultValue(valuetxt))
                    continue;
                sb.AppendLine($"        member{idx}.SetTextMD({FormatValue(valuetxt)});");
                continue;
            }
            if (SkipMemberProperty(prop.Name))
                continue;
            var value = prop.GetValue(dto);
            if (value == null || IsDefaultValue(value))
                continue;
            var formattedValue = FormatValue(value);
            if (formattedValue != "null")
                sb.AppendLine($"        member{idx}.{prop.Name} = {formattedValue};");
        }
        return sb.ToString();
    }

    public virtual string GenerateScoreClass(LingoMovieDTO movie)
    {
        var sb = new StringBuilder();
        sb.Append(Header);
        sb.AppendLine("using LingoEngine.Core;");
        sb.AppendLine("using LingoEngine.Movies;");
        sb.AppendLine("using LingoEngine.Sprites;");
        sb.AppendLine("using LingoEngine.Members;");
        sb.AppendLine("using AbstUI.Primitives;");
        sb.AppendLine();
        sb.AppendLine("public class ScoreBuilder : ILingoScoreBuilder");
        sb.AppendLine("{");
        sb.AppendLine("    public void Build(ILingoMovie movie)");
        sb.AppendLine("    {");
        foreach (var sp in movie.Sprites)
        {
            var member = movie.Casts.SelectMany(c => c.Members)
                .FirstOrDefault(m => m.Number == sp.MemberNum || m.NumberInCast == sp.MemberNum);
            var castNum = member?.CastLibNum ?? 0;
            var memberNum = member?.NumberInCast ?? sp.MemberNum;
            sb.AppendLine($"        movie.AddSprite({sp.SpriteNum}, {sp.BeginFrame}, {sp.EndFrame}, {FormatFloat(sp.LocH)}, {FormatFloat(sp.LocV)}, s =>");
            sb.AppendLine("        {");
            var props = new List<string>();
            void AddProp(object? val, string assignment)
            {
                if (!IsDefaultValue(val) && val != null)
                    props.Add(assignment);
            }

            AddProp(sp.Name, $"s.Name = {FormatValue(sp.Name)};");
            AddProp(sp.DisplayMember, $"s.DisplayMember = {FormatValue(sp.DisplayMember)};");
            AddProp(sp.SpritePropertiesOffset, $"s.SpritePropertiesOffset = {FormatValue(sp.SpritePropertiesOffset)};");
            AddProp(sp.Puppet, $"s.Puppet = {FormatValue(sp.Puppet)};");
            AddProp(sp.Lock, $"s.Lock = {FormatValue(sp.Lock)};");
            AddProp(sp.Visibility, $"s.Visibility = {FormatValue(sp.Visibility)};");
            AddProp(sp.LocZ, $"s.LocZ = {FormatValue(sp.LocZ)};");
            AddProp(sp.Rotation, $"s.Rotation = {FormatValue(sp.Rotation)};");
            AddProp(sp.Skew, $"s.Skew = {FormatValue(sp.Skew)};");
            AddProp(sp.RegPoint, $"s.RegPoint = {FormatValue(sp.RegPoint)};");
            AddProp(sp.Ink, $"s.Ink = {FormatValue(sp.Ink)};");
            AddProp(sp.ForeColor, $"s.ForeColor = {FormatValue(sp.ForeColor)};");
            AddProp(sp.BackColor, $"s.BackColor = {FormatValue(sp.BackColor)};");
            AddProp(sp.Blend, $"s.Blend = {FormatValue(sp.Blend)};");
            AddProp(sp.Editable, $"s.Editable = {FormatValue(sp.Editable)};");
            AddProp(sp.FlipH, $"s.FlipH = {FormatValue(sp.FlipH)};");
            AddProp(sp.FlipV, $"s.FlipV = {FormatValue(sp.FlipV)};");
            AddProp(sp.ScoreColor, $"s.ScoreColor = {FormatValue(sp.ScoreColor)};");
            AddProp(sp.Width, $"s.Width = {FormatValue(sp.Width)};");
            AddProp(sp.Height, $"s.Height = {FormatValue(sp.Height)};");
            props.Add($"s.Member = movie.CastLib.GetMember({memberNum}, {castNum}) as LingoMember;");

            sb.AppendLine($"            {string.Join(" ", props)}");
            sb.AppendLine("        });");
        }
        sb.AppendLine("    }");
        sb.AppendLine("}");
        return sb.ToString();
    }

    public virtual string GenerateMovieClass(LingoMovieDTO movie)
    {
        var sb = new StringBuilder();
        sb.Append(Header);
        sb.AppendLine("using LingoEngine.Core;");
        sb.AppendLine("using LingoEngine.Movies;");
        sb.AppendLine();
        sb.AppendLine("public class MovieBuilder : ILingoMovieBuilder");
        sb.AppendLine("{");
        sb.AppendLine("    public ILingoMovie Build(ILingoPlayer player)");
        sb.AppendLine("    {");
        foreach (var cast in movie.Casts)
            sb.AppendLine($"        player.CastLibs.LoadCastLibFromBuilder(new {Sanitize(cast.Name)}Cast());");
        sb.AppendLine($"        var movie = player.NewMovie({FormatValue(movie.Name)});");
        sb.AppendLine($"        movie.Tempo = {movie.Tempo};");
        if (!string.IsNullOrWhiteSpace(movie.About))
            sb.AppendLine($"        movie.About = {FormatValue(movie.About)};");
        if (!string.IsNullOrWhiteSpace(movie.Copyright))
            sb.AppendLine($"        movie.Copyright = {FormatValue(movie.Copyright)};");
        if (!string.IsNullOrWhiteSpace(movie.UserName))
            sb.AppendLine($"        movie.UserName = {FormatValue(movie.UserName)};");
        if (!string.IsNullOrWhiteSpace(movie.CompanyName))
            sb.AppendLine($"        movie.CompanyName = {FormatValue(movie.CompanyName)};");
        sb.AppendLine("        new ScoreBuilder().Build(movie);");
        sb.AppendLine("        return movie;");
        sb.AppendLine("    }");
        sb.AppendLine("}");
        return sb.ToString();
    }

    public virtual string MemberClass(LingoMemberTypeDTO type) => type switch
    {
        LingoMemberTypeDTO.Bitmap => nameof(LingoMemberBitmap),
        LingoMemberTypeDTO.Sound => nameof(LingoMemberSound),
        LingoMemberTypeDTO.FilmLoop => nameof(LingoFilmLoopMember),
        LingoMemberTypeDTO.Text => nameof(LingoMemberText),
        LingoMemberTypeDTO.Field => nameof(LingoMemberField),
        LingoMemberTypeDTO.Shape => nameof(LingoMemberShape),
        LingoMemberTypeDTO.Script => nameof(LingoMemberScript),
        LingoMemberTypeDTO.Palette => nameof(LingoColorPaletteMember),
        LingoMemberTypeDTO.Transition => nameof(LingoTransitionMember),
        _ => nameof(LingoMember)
    };

    protected virtual bool SkipMemberProperty(string name) => name switch
    {
        "Name" or "Number" or "CastLibNum" or "NumberInCast" or "Type" or "RegPoint" or "FileName" or
        "ImageFile" or "SoundFile" or "Bytes" or "Size" or "Text" or "Length" or "Stereo" or "FrameCount" => true,
        _ => false
    };


    protected virtual bool IsDefaultValue(object? value)
    {
        if (value == null)
            return true;
        if (value is string s)
            return string.IsNullOrEmpty(s);
        var type = value.GetType();
        if (!type.IsValueType)
            return false;
        return value.Equals(System.Activator.CreateInstance(type));
    }


    protected virtual string FormatValue(object value)
    {
        switch (value)
        {
            case string s:
                return "@\"" + s.Replace("\"", "\"\"") + "\"";
            case bool b:
                return b ? "true" : "false";
            case float f:
                return f.ToString(CultureInfo.InvariantCulture) + "f";
            case double d:
                return d.ToString(CultureInfo.InvariantCulture) + "d";
            case int or long or short:
                return Convert.ToString(value, CultureInfo.InvariantCulture) ?? "0";
            case LingoPointDTO p:
                return $"new APoint({p.X}, {p.Y})";
            case LingoColorDTO c:
                return $"new AColor({c.R}, {c.G}, {c.B}, {c.A})";
            default:
                return "null";
        }
    }
    protected virtual string FormatFloat(float value) => value.ToString(CultureInfo.InvariantCulture) + "f";

    protected virtual string Sanitize(string name)
    {
        var sb = new StringBuilder();
        foreach (var ch in name)
            sb.Append(char.IsLetterOrDigit(ch) ? ch : '_');
        if (sb.Length == 0 || char.IsDigit(sb[0]))
            sb.Insert(0, '_');
        return sb.ToString();
    }
}

