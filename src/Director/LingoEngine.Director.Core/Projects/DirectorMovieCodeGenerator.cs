using System.Globalization;
using System.Text;
using System.Text.Json;
using LingoEngine.IO;
using LingoEngine.IO.Data.DTO;
using LingoEngine.Movies;
using LingoEngine.Core;
using LingoEngine.Members;
using LingoEngine.Casts;
using LingoEngine.Bitmaps;
using LingoEngine.Sounds;
using LingoEngine.FilmLoops;
using LingoEngine.Texts;
using LingoEngine.Shapes;
using LingoEngine.Scripts;
using LingoEngine.ColorPalettes;
using LingoEngine.Transitions;
using AbstUI.Primitives;

namespace LingoEngine.Director.Core.Projects;

/// <summary>
/// Generates C# source files from a movie state.
/// </summary>
public class DirectorMovieCodeGenerator
{
    private const string Header = "// <auto-generated>\n// This file was generated by Director.\n// </auto-generated>\n";

    public void Generate(LingoMovie movie, string projectFolder)
    {
        var dir = Path.Combine(projectFolder, "projects");
        Directory.CreateDirectory(dir);

        var repo = new JsonStateRepository();
        var json = repo.Serialize(movie, projectFolder);
        var dto = JsonSerializer.Deserialize<LingoProjectDTO>(json)!;
        var movieDto = dto.Movies.First();

        foreach (var cast in movieDto.Casts)
        {
            var code = GenerateCastClass(cast);
            File.WriteAllText(Path.Combine(dir, Sanitize(cast.Name) + "Cast.cs"), code);
        }

        var scoreCode = GenerateScoreClass(movieDto);
        File.WriteAllText(Path.Combine(dir, "ScoreBuilder.cs"), scoreCode);

        var movieCode = GenerateMovieClass(movieDto);
        File.WriteAllText(Path.Combine(dir, "MovieBuilder.cs"), movieCode);
    }

    private static string GenerateCastClass(LingoCastDTO cast)
    {
        var sb = new StringBuilder();
        sb.Append(Header);
        sb.AppendLine("using LingoEngine.Casts;");
        sb.AppendLine("using LingoEngine.Core;");
        sb.AppendLine("using LingoEngine.Members;");
        sb.AppendLine("using LingoEngine.Bitmaps;");
        sb.AppendLine("using LingoEngine.Sounds;");
        sb.AppendLine("using LingoEngine.FilmLoops;");
        sb.AppendLine("using LingoEngine.Texts;");
        sb.AppendLine("using LingoEngine.Shapes;");
        sb.AppendLine("using LingoEngine.Scripts;");
        sb.AppendLine("using LingoEngine.ColorPalettes;");
        sb.AppendLine("using LingoEngine.Transitions;");
        sb.AppendLine("using AbstUI.Primitives;");
        sb.AppendLine();
        var className = Sanitize(cast.Name) + "Cast";
        sb.AppendLine($"public static class {className}");
        sb.AppendLine("{");
        sb.AppendLine("    public static void Build(LingoPlayer player)");
        sb.AppendLine("    {");
        sb.AppendLine($"        player.AddCastLib({FormatValue(cast.Name)}, false, cast =>");
        sb.AppendLine("        {");
        var idx = 0;
        foreach (var m in cast.Members)
        {
            idx++;
            sb.Append(GenerateMember(m, idx));
        }
        sb.AppendLine("        });");
        sb.AppendLine("    }");
        sb.AppendLine("}");
        return sb.ToString();
    }

    private static string GenerateMember(LingoMemberDTO dto, int idx)
    {
        var sb = new StringBuilder();
        var typeName = Enum.GetName(typeof(LingoMemberTypeDTO), dto.Type) ?? "Unknown";
        sb.AppendLine($"            var member{idx} = ({MemberClass(dto.Type)})cast.Add(LingoMemberType.{typeName}, {dto.NumberInCast}, {FormatValue(dto.Name)}, {FormatValue(dto.FileName)}, new APoint({dto.RegPoint.X}, {dto.RegPoint.Y}));");
        foreach (var prop in dto.GetType().GetProperties())
        {
            if (SkipMemberProperty(prop.Name))
                continue;
            var value = prop.GetValue(dto);
            if (value == null)
                continue;
            sb.AppendLine($"            member{idx}.{prop.Name} = {FormatValue(value)};");
        }
        return sb.ToString();
    }

    private static string GenerateScoreClass(LingoMovieDTO movie)
    {
        var sb = new StringBuilder();
        sb.Append(Header);
        sb.AppendLine("using LingoEngine.Movies;");
        sb.AppendLine("using LingoEngine.Sprites;");
        sb.AppendLine("using LingoEngine.Members;");
        sb.AppendLine("using AbstUI.Primitives;");
        sb.AppendLine();
        sb.AppendLine("public static class ScoreBuilder");
        sb.AppendLine("{");
        sb.AppendLine("    public static void Build(LingoMovie movie)");
        sb.AppendLine("    {");
        foreach (var sp in movie.Sprites)
        {
            sb.AppendLine($"        movie.AddSprite({sp.SpriteNum}, {sp.BeginFrame}, {sp.EndFrame}, {FormatFloat(sp.LocH)}, {FormatFloat(sp.LocV)}, s =>");
            sb.AppendLine("        {");
            sb.AppendLine($"            s.Name = {FormatValue(sp.Name)};");
            sb.AppendLine($"            s.DisplayMember = {sp.DisplayMember};");
            sb.AppendLine($"            s.SpritePropertiesOffset = {sp.SpritePropertiesOffset};");
            sb.AppendLine($"            s.Puppet = {sp.Puppet.ToString().ToLowerInvariant()};");
            sb.AppendLine($"            s.Lock = {sp.Lock.ToString().ToLowerInvariant()};");
            sb.AppendLine($"            s.Visibility = {sp.Visibility.ToString().ToLowerInvariant()};");
            sb.AppendLine($"            s.LocZ = {sp.LocZ};");
            sb.AppendLine($"            s.Rotation = {FormatFloat(sp.Rotation)};");
            sb.AppendLine($"            s.Skew = {FormatFloat(sp.Skew)};");
            sb.AppendLine($"            s.RegPoint = new APoint({sp.RegPoint.X}, {sp.RegPoint.Y});");
            sb.AppendLine($"            s.Ink = {sp.Ink};");
            sb.AppendLine($"            s.ForeColor = new AColor({sp.ForeColor.R}, {sp.ForeColor.G}, {sp.ForeColor.B}, {sp.ForeColor.A});");
            sb.AppendLine($"            s.BackColor = new AColor({sp.BackColor.R}, {sp.BackColor.G}, {sp.BackColor.B}, {sp.BackColor.A});");
            sb.AppendLine($"            s.Blend = {FormatFloat(sp.Blend)};");
            sb.AppendLine($"            s.Editable = {sp.Editable.ToString().ToLowerInvariant()};");
            sb.AppendLine($"            s.FlipH = {sp.FlipH.ToString().ToLowerInvariant()};");
            sb.AppendLine($"            s.FlipV = {sp.FlipV.ToString().ToLowerInvariant()};");
            sb.AppendLine($"            s.ScoreColor = {sp.ScoreColor};");
            sb.AppendLine($"            s.Width = {FormatFloat(sp.Width)};");
            sb.AppendLine($"            s.Height = {FormatFloat(sp.Height)};");
            sb.AppendLine($"            s.Member = movie.CastLib.Member[{sp.MemberNum}] as LingoMember;");
            sb.AppendLine("        });");
        }
        sb.AppendLine("    }");
        sb.AppendLine("}");
        return sb.ToString();
    }

    private static string GenerateMovieClass(LingoMovieDTO movie)
    {
        var sb = new StringBuilder();
        sb.Append(Header);
        sb.AppendLine("using LingoEngine.Core;");
        sb.AppendLine("using LingoEngine.Movies;");
        sb.AppendLine();
        sb.AppendLine("public static class MovieBuilder");
        sb.AppendLine("{");
        sb.AppendLine("    public static LingoMovie Build(LingoPlayer player)");
        sb.AppendLine("    {");
        foreach (var cast in movie.Casts)
            sb.AppendLine($"        {Sanitize(cast.Name)}Cast.Build(player);");
        sb.AppendLine($"        var movie = (LingoMovie)player.NewMovie({FormatValue(movie.Name)});");
        sb.AppendLine($"        movie.Tempo = {movie.Tempo};");
        if (!string.IsNullOrWhiteSpace(movie.About))
            sb.AppendLine($"        movie.About = {FormatValue(movie.About)};");
        if (!string.IsNullOrWhiteSpace(movie.Copyright))
            sb.AppendLine($"        movie.Copyright = {FormatValue(movie.Copyright)};");
        if (!string.IsNullOrWhiteSpace(movie.UserName))
            sb.AppendLine($"        movie.UserName = {FormatValue(movie.UserName)};");
        if (!string.IsNullOrWhiteSpace(movie.CompanyName))
            sb.AppendLine($"        movie.CompanyName = {FormatValue(movie.CompanyName)};");
        sb.AppendLine("        ScoreBuilder.Build(movie);");
        sb.AppendLine("        return movie;");
        sb.AppendLine("    }");
        sb.AppendLine("}");
        return sb.ToString();
    }

    private static string MemberClass(LingoMemberTypeDTO type) => type switch
    {
        LingoMemberTypeDTO.Bitmap => nameof(LingoMemberBitmap),
        LingoMemberTypeDTO.Sound => nameof(LingoMemberSound),
        LingoMemberTypeDTO.FilmLoop => nameof(LingoFilmLoopMember),
        LingoMemberTypeDTO.Text => nameof(LingoMemberText),
        LingoMemberTypeDTO.Field => nameof(LingoMemberField),
        LingoMemberTypeDTO.Shape => nameof(LingoMemberShape),
        LingoMemberTypeDTO.Script => nameof(LingoMemberScript),
        LingoMemberTypeDTO.Palette => nameof(LingoColorPaletteMember),
        LingoMemberTypeDTO.Transition => nameof(LingoTransitionMember),
        _ => nameof(LingoMember)
    };

    private static bool SkipMemberProperty(string name) => name switch
    {
        "Name" or "Number" or "CastLibNum" or "NumberInCast" or "Type" or "RegPoint" or "FileName" or
        "ImageFile" or "SoundFile" or "Bytes" => true,
        _ => false
    };


    private static string FormatValue(object value)
    {
        switch (value)
        {
            case string s:
                return "@\"" + s.Replace("\"", "\"\"") + "\"";
            case bool b:
                return b ? "true" : "false";
            case float f:
                return f.ToString(CultureInfo.InvariantCulture) + "f";
            case double d:
                return d.ToString(CultureInfo.InvariantCulture) + "d";
            case int or long or short:
                return Convert.ToString(value, CultureInfo.InvariantCulture) ?? "0";
            case LingoPointDTO p:
                return $"new APoint({p.X}, {p.Y})";
            case LingoColorDTO c:
                return $"new AColor({c.R}, {c.G}, {c.B}, {c.A})";
            default:
                return "null";
        }
    }
    private static string FormatFloat(float value) => value.ToString(CultureInfo.InvariantCulture) + "f";

    private static string Sanitize(string name)
    {
        var sb = new StringBuilder();
        foreach (var ch in name)
            sb.Append(char.IsLetterOrDigit(ch) ? ch : '_');
        if (sb.Length == 0 || char.IsDigit(sb[0]))
            sb.Insert(0, '_');
        return sb.ToString();
    }
}

